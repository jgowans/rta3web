//DATA
float[] y_vals;
float[] x_vals;
int line_length = 0;
float MAXX = 0;
float MINX = 0;
float MAXY = 0;
float MINY = 0;
float XDIFF = 0;
int YDIFF = 0;
float minX = 0;
float maxX = 0;
float minY = 0;
float maxY = 0;
float xDiff = 0.0;
float yDiff = 0.0;

int normlength = 0;
int[] x_norm;
int[] y_norm;

//VISUALS
Pfont f;
color[] colors;
String heading, x_heading, y_heading;
int left, right, top, bottom, x_width, y_height; //Graph edges

//CONTROL
boolean loaded = false;
boolean renorm = false;
boolean xZoom = true;
boolean yZoom = true; 

//INTERACTION
float clickX;
float clickY;
int xPan;
int yPan;
int xScaleCorrection;
int yScaleCorrection;
float yScale = 1.0;
float xScale = 1.0;
int xCentre = left + x_width/2;
int yCentre = top + y_height/2;


void setup(){
    frameRate(30);
    size(1400,500);
    noSmooth();
    f = createFont ("Arial", 24, true);
    left = width * 0.1;
    right = width * 0.9;
    top = height * 0.1;
    bottom = height * 0.9;
    x_width = width * 0.8;
    y_height = height * 0.8;
    xCentre = left + x_width/2;
    yCentre = top + y_height/2;
}

void setLabels (String h, String x, String y){
  heading = h;
  xaxis = x;
  yaxis = y;
}

void setVals(float[] x_data, float[] y_data, float maxx, float minx, float maxy, float miny)
{
  x_vals = x_data;
  y_vals = y_data;
  // n_lines = x_data.length;
  line_length = x_vals.length;
  MAXX = maxx;
  MAXY = maxy;
  MINX = minx;
  MINY = miny;
  XDIFF = MAXX - MINX;
  YDIFF = MAXY - MINY;
  maxX = MAXX;
  minX = MINX;
  maxY = MAXY;
  minY = MINY;
  xDiff = MAXX - MINX;
  yDiff = MAXY - MINY;
  maxXPos = line_length - 1;
  minXPos = 0;
  length = maxXPos - minXPos + 1;
  renorm = true;
  loaded = true;
}

/*Finds the point where the line defined by (x1,y1) and (x2,y2) intersects with the line y = c*/
float getIntersection (float x1, float y1, float x2, float y2, float c)
{
  float m = (y1 - y2) / (x1 - x2);
  float x = (c - y1)/m + x1;
  return x;
}

void normalise()
{
  x_norm = new int[x_vals.length];
  y_norm = new int[y_vals.length];
  float x_fact = x_width/XDIFF;
  float y_fact = y_height/YDIFF;
  for (int i = 0; i < x_vals.length; i++){
    x_norm[i] = (x_vals[i]-MINX) * x_fact + left;
    y_norm[i] = bottom - (y_vals[i]-MINY) * y_fact;
  }
}



void mouseDragged()
{
  int distX = clickX - mouseX;
  int distY = clickY - mouseY;
  clickX = mouseX;
  clickY = mouseY;
  xPan = xPan - distX;
  yPan = yPan - distY;
}

void calcBounds()
{
  float xMid = (MINX + MAXX)/2;
  float yMid = (MINY + MAXY)/2;
  xDiff = XDIFF / xScale;
  yDiff = YDIFF / yScale
  minX = xMid - (xDiff/2);
  maxX = xMid + (xDiff/2);
  minY = yMid - (yDiff/2);
  maxY = yMid + (yDiff/2);

  maxX = (maxX - (xDiff) * (xPan/x_width));
  minX = (minX - (xDiff) * (xPan/x_width));
  minY = (minY + (yDiff) * (yPan/y_height));
  maxY = (maxY + (yDiff) * (yPan/y_height));
}

boolean inBounds (int v)
{
  if (v >= 0 && v < x_vals.length)
    return true;
  else
    return false;
}

void mousePressed ()
{
  clickX = mouseX;
  clickY = mouseY;
}

void mouseScrolled()
{
  if (mouseScroll > 0)
  {
    if (xZoom){
      xScale = xScale + 0.1;
      xScaleCorrection = -(xScale - 1)/xScale * xCentre;
    }
    if (yZoom){
      yScale = yScale + 0.1;
      yScaleCorrection = -(yScale - 1)/yScale * yCentre;
    }
  }
  else
  {
    if (xZoom){
      xScale = xScale - 0.1;
      xScaleCorrection = -(xScale - 1)/xScale * xCentre;
    }
    if (yZoom){
      yScale = yScale - 0.1;
      yScaleCorrection = -(yScale - 1)/yScale * yCentre;
    }
  }


}

void drawLine ()
{
  arc(width/2, height/2, 2,2,0,TWO_PI);

  translate(xScaleCorrection, yScaleCorrection);
  int start = minXPos;
  if (start < 1)
    start = 1;
  stroke(#FF0000);

  arc(width/2, height/2, 2,2,0,TWO_PI);
  strokeWeight(0.5);

  minXPos =  x_to_xPos(minX);
  if (minXPos == 0)
    minXPos = 1;

  int scaledXPan = xPan / xScale;
  int scaledYPan = yPan / yScale;

  for ( int i = minXPos; i < x_to_xPos(maxX); i++)
  {
    // if (i % 2 == 0)
      // text("x = " + x_vals[i], scaledXPan + x_norm[i], scaledYPan + y_norm[i]);
    line(scaledXPan + x_norm[i - 1], scaledYPan + y_norm[i - 1], scaledXPan + x_norm[i], scaledYPan + y_norm[i]);
  }

  translate (-xScaleCorrection,-yScaleCorrection);
}

int get_minX(){
  return x_vals[0] - (x_norm[0] - left - xPan / xScale) / x_width * XDIFF;
}
int get_maxX(){
  return x_vals[x_vals.length - 1] - (x_norm[0] - left - xPan / xScale) / x_width * XDIFF;
}

int x_to_xPos(float x)
{
  if (x < MINX)
    return 0;
  else if (x > MAXX)
    return x_vals.length - 1;
  else{
    return int((x - MINX)/XDIFF * (x_vals.length - 1));
  }

}

int binSearch (float[] arr, float c)
{
  int max = arr.length - 1;
  int min = 0;
  int imid = 0;
  // continue searching while [imin,imax] is not empty
  while (min <= max)
  {
    /* calculate the midpoint for roughly equal partition */
    imid = int((min + max) / 2);

    // determine which subarray to search
    if (arr[imid] < c)
    {
      min = imid + 1;
    }
    else if (arr[imid] > c)
    {
      max = imid - 1;
    }
    else
      return imid;
  }
  return imid;
}

void resetVals(float[] y_data, miny, maxy){
  println("reset");
  y_vals = y_data;
  MAXY = maxy;
  MINY = miny;
  maxY = MAXY;
  minY = MINY;
  yDiff = MAXY - MINY;
  renorm = true;
}

void draw() {

   background(255);

  if(loaded)
  {
    calcBounds();
    if (renorm)
    {
      normalise();
      renorm = false;
    }
    scale(xScale,yScale);
    drawLine();
    scale(1/xScale, 1/yScale);
    drawBoundary();
    drawAxes (heading, x_heading, y_heading, 10, 10);
  }
}

//Draw bounding box around graph so that lines whihc go out of the plot are covered
void drawBoundary()
{
  stroke(#FFFFFF);
  fill(#FFFFFF);
  rect(0,0,left,height)
  rect(0,0,width,top);
  rect(right,0,width-right, height);
  rect(0,bottom, width, height-bottom);
}

//Draws the axes for the line graph, the min and max values are the extrem values on each axes. nX and
//nY determine the amount "number labels" on the axes. So if minX = 0, maxX = 10 and nX = 5, the x
//axis will have the points 0,2,4,6,8,10 labeled. 
void drawAxes(String heading, String xName, String yName, int nX, int nY)
{
  float xStep = 0.8 * width/nX, yStep = 0.8 * height/nY;
  float xGap = (maxX - minX)/float(nX), yGap = (maxY - minY)/float(nY);

  fill(#000000);
  strokeWeight(2);
  stroke(#DCDCDC);
  float pos = 0.1 * height;
  float val = maxY;
  String temp;
  for (int i = 0; i < nY; i++)
  {
    text(formatFloat(val, 2), width * 0.05, pos + 3);
    strokeWeight(0.5);
    line (width * 0.1, pos, width * 0.9, pos);
    strokeWeight(2);
    pos = pos + yStep;
    val = val - yGap;
  }
  text(formatFloat(val, 2), width * 0.05, pos + 3);

  stroke(#FF0000);

  // findClosestToMouse();
  // text("(" + formatFloat(data[2*mouse], 2)  + ", " + formatFloat(data[2*mouse+1], 2) + ")", norm[2 * mouse] + 11, norm[2 * mouse + 1]);
  // arc (norm[2 * mouse], norm[2 * mouse + 1], 10, 10, 0, TWO_PI);

  stroke(0);
  line (left, top, left, bottom);
  line (left, bottom, right, bottom);
  pos = left;
  val = minX;
  temp = formatFloat(val, 2);
  text (temp, pos - (temp.length() * 3), height * 0.95);
  pos = pos + xStep;
  val = val + xGap;
  tick = height * 0.895;
  for (int i = 0; i < nX; i++)
  {
    line (pos, bottom, pos, tick);
    temp = formatFloat(val, 2);
    text (temp, pos - (temp.length() * 3), height * 0.95);
    pos = pos + xStep;
    val = val + xGap;
  }

  fill(0);
  text(heading, width * 0.5 - (heading.length() * 4), height * 0.05);
  text (xName, width * 0.5, height);
  translate(width*0.02, height * 0.5);
  rotate (-HALF_PI);
  text (yName, 0, 0);
}

String formatFloat (float f, int r)
{
  String original = str(f);
  String ret = str(floor(f));
  int nRight = original.length() - ret.length();
  //println (original.charAt(ret.length() + 1) + " nRight = " + nRight);
  if (nRight >= r + 1)
    ret = ret + original.substring(ret.length(), ret.length() + r + 1);
  else if (nRight == 2 && original.charAt(ret.length() + 1) != '0')
    ret = ret + original.substring(ret.length(), ret.length() + nRight);
  else if (nRight > 2)
    ret = ret + original.substring(ret.length(), ret.length() + nRight);
  return ret;
}